//
// This program requires a Nokia 5110 LCD module.
//
// It is assumed that the LCD module is connected to
// the following pins using a levelshifter to get the
// correct voltage to the module.
//      SCK  - Pin 8
//      MOSI - Pin 9
//      DC   - Pin 10
//      RST  - Pin 11
//      CS   - Pin 12
//
#include <LCD5110_Graph.h>

#include "DHT.h"



#define DHTPIN 3     // what pin we're connected to

// Uncomment whatever type you're using!
//#define DHTTYPE DHT11   // DHT 11 
#define DHTTYPE DHT11   // DHT 22  (AM2302)
//#define DHTTYPE DHT21   // DHT 21 (AM2301)

// Connect pin 1 (on the left) of the sensor to +5V
// Connect pin 2 of the sensor to whatever your DHTPIN is
// Connect pin 4 (on the right) of the sensor to GROUND
// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor

DHT dht(DHTPIN, DHTTYPE);

LCD5110 myGLCD(8,9,10,11.,12);

const unsigned char bmbtest[] PROGMEM = {
84,48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xC0, 0xFE, 0xFE, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xF0, 0x7F, 0x3F, 0x3F, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7C, 0x80, 0x80, 0x7C, 0x03, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

extern uint8_t SmallFont[];
extern uint8_t BigNumbers[];
extern uint8_t TinyFont[];


int y;
boolean button = false;
boolean lastb = false;
int buttonPin = 6;
int index = 0;
int maxPages = 2;

int centerx = 42;
int centery = 24;
int needleLenght = 12;

void setup()
{
  myGLCD.InitLCD();
  myGLCD.setFont(SmallFont);
  dht.begin();
  pinMode(buttonPin,INPUT);
  
}

void loop()
{ 
  pageManager();
  
  myGLCD.update();
}

void pageManager(){
 button = digitalRead(buttonPin);
  if (button != lastb) {
    // if the state has changed, increment the counter
    if (button == HIGH) {
      // if the current state is HIGH then the button
      // wend from off to on:
      index++;
      if(index > maxPages){
         index = 0; 
      }
    }else if(button ==LOW){
      
    }
    lastb = button;
  } 
  
  switch(index){
    case 0:
    myGLCD.clrScr();
    temp();
    break;
    case 1:
    myGLCD.clrScr();
    tempAndHum();
    break;
    case 2:
    myGLCD.clrScr();
    sleepPage();
    break;
    
  }
}


void tempAndHum(){
  y = 0;
    
    int h = (int)dht.readHumidity();
    int t = (int)dht.readTemperature();
    myGLCD.setFont(TinyFont);
    myGLCD.print("Temperature:",0,24);
    myGLCD.print("Humidity:",0,0);
    myGLCD.setFont(SmallFont);
    myGLCD.print("%",75,10);
    myGLCD.print("C",75,28);
    myGLCD.setFont(BigNumbers);
    myGLCD.printNumI(t,48,24,2);
    myGLCD.printNumI(h,48,0,2);
    delay(10); 
}

void temp(){//temp page
 myGLCD.setFont(SmallFont);
 moveNeedleTo(index);
 
 myGLCD.printNumI(index,0,24);
}

void moveNeedleTo(int pos){
  int posi = pos;
 switch(posi){
  case 0 :
    myGLCD.drawLine(centerx, centery,centerx,centery-needleLenght);
    break;
  case 1:
    myGLCD.drawLine(centerx, centery,centerx+needleLenght,centery-needleLenght);
    break;
  case 2:
    myGLCD.drawLine(centerx, centery,centerx+needleLenght,centery);
    break;
  case 3:
    myGLCD.drawLine(centerx, centery,centerx+needleLenght,centery+needleLenght);
    break;
  case 4:
    myGLCD.drawLine(centerx, centery,centerx,centery+needleLenght);
    break;
  case 5:
    myGLCD.drawLine(centerx, centery,centerx-needleLenght,centery+needleLenght);
    break;
  case 6:
    myGLCD.drawLine(centerx, centery,centerx-needleLenght,centery);
    break;
  case 7:
    myGLCD.drawLine(centerx, centery,centerx-needleLenght,centery-needleLenght);
    break;
 } 
  
}

void drawArrow(){
  myGLCD.drawLine(10,10,10,20);
  myGLCD.drawLine(10,10,20,15);
  myGLCD.drawLine(10,20,20,15);
}

void sleepPage(){
  myGLCD.setFont(SmallFont);
   myGLCD.print("Sleeping!",12,0);
   myGLCD.print("Press X",24,20);
   myGLCD.print("To Wake!",24,35);
}

